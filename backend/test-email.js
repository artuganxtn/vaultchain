/**
 * Email Configuration Test Script
 * 
 * This script tests your SMTP email configuration without running the full server.
 * 
 * Usage:
 *   node test-email.js
 * 
 * Make sure you have a .env file in the backend directory with your SMTP settings.
 */

require('dotenv').config();
const crypto = require('crypto');
const { sendPasswordResetEmail, verifyEmailConfig } = require('./services/emailService');

async function testEmail() {
    console.log('\nüß™ Testing Email Configuration...\n');
    console.log('='.repeat(50));
    
    // Step 1: Check configuration
    console.log('\nüìã Step 1: Checking Email Configuration');
    console.log('-'.repeat(50));
    
    const config = {
        host: process.env.SMTP_HOST || 'Not set',
        port: process.env.SMTP_PORT || 'Not set',
        secure: process.env.SMTP_SECURE || 'Not set',
        user: process.env.SMTP_USER || 'Not set',
        password: process.env.SMTP_PASSWORD ? '***' + process.env.SMTP_PASSWORD.slice(-4) : 'Not set'
    };
    
    console.log('SMTP_HOST:', config.host);
    console.log('SMTP_PORT:', config.port);
    console.log('SMTP_SECURE:', config.secure);
    console.log('SMTP_USER:', config.user);
    console.log('SMTP_PASSWORD:', config.password);
    
    // Step 2: Verify email service
    console.log('\nüìã Step 2: Verifying Email Service');
    console.log('-'.repeat(50));
    
    const emailStatus = await verifyEmailConfig();
    if (emailStatus.configured) {
        console.log('‚úÖ', emailStatus.message);
    } else {
        console.log('‚ö†Ô∏è ', emailStatus.message);
        console.log('\nüí° Tip: Create a .env file in the backend directory with your SMTP settings.');
        console.log('   See EMAIL_SETUP.md or SMTP_SETUP_GUIDE.md for instructions.\n');
        return;
    }
    
    // Step 3: Send test email
    console.log('\nüìã Step 3: Sending Test Email');
    console.log('-'.repeat(50));
    
    const testEmail = process.env.SMTP_USER || 'your-email@example.com';
    const frontendUrl = process.env.FRONTEND_URL || 'https://vaultchaintr.com';
    const testToken = 'test-token-' + Math.random().toString(36).substring(7);
    const testLink = `${frontendUrl}/?token=${testToken}`;
    const testName = 'Test User';
    
    console.log(`Sending test email to: ${testEmail}`);
    console.log(`Test reset link: ${testLink}`);
    
    try {
        const success = await sendPasswordResetEmail(testEmail, testLink, testName, testToken);
        
        if (success) {
            console.log('\n‚úÖ SUCCESS! Test email sent successfully!');
            console.log(`   Check your inbox at: ${testEmail}`);
            console.log(`   Test reset link: ${testLink}`);
            console.log('\n   If you don\'t see the email:');
            console.log('   - Check spam/junk folder');
            console.log('   - Wait a few seconds for delivery');
            console.log('   - Verify the email address is correct');
            console.log('\n   üí° Note: This is a test link. For real password reset,');
            console.log('      the link will be generated by the backend when requested.');
        } else {
            console.log('\n‚ùå FAILED! Email could not be sent.');
            console.log('   Check your SMTP settings in .env file.');
        }
    } catch (error) {
        console.log('\n‚ùå ERROR sending email:');
        console.log('   ', error.message);
        console.log('\nüí° Common issues:');
        console.log('   - Wrong SMTP credentials');
        console.log('   - SMTP server not reachable');
        console.log('   - Firewall blocking connection');
        console.log('   - Incorrect port or security settings');
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('Test Complete!\n');
}

// Run the test
testEmail().catch(error => {
    console.error('\n‚ùå Fatal error:', error);
    process.exit(1);
});

